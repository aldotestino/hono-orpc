/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedChatIndexRouteImport } from './routes/_protected/chat/index'
import { Route as ProtectedChatUuidIndexRouteImport } from './routes/_protected/chat/$uuid/index'
import { Route as ProtectedChatUuidDetailsRouteImport } from './routes/_protected/chat/$uuid/details'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedChatIndexRoute = ProtectedChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedChatUuidIndexRoute = ProtectedChatUuidIndexRouteImport.update({
  id: '/chat/$uuid/',
  path: '/chat/$uuid/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedChatUuidDetailsRoute =
  ProtectedChatUuidDetailsRouteImport.update({
    id: '/chat/$uuid/details',
    path: '/chat/$uuid/details',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-up': typeof SignUpRoute
  '/chat': typeof ProtectedChatIndexRoute
  '/chat/$uuid/details': typeof ProtectedChatUuidDetailsRoute
  '/chat/$uuid': typeof ProtectedChatUuidIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-up': typeof SignUpRoute
  '/chat': typeof ProtectedChatIndexRoute
  '/chat/$uuid/details': typeof ProtectedChatUuidDetailsRoute
  '/chat/$uuid': typeof ProtectedChatUuidIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/sign-up': typeof SignUpRoute
  '/_protected/chat/': typeof ProtectedChatIndexRoute
  '/_protected/chat/$uuid/details': typeof ProtectedChatUuidDetailsRoute
  '/_protected/chat/$uuid/': typeof ProtectedChatUuidIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-up' | '/chat' | '/chat/$uuid/details' | '/chat/$uuid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-up' | '/chat' | '/chat/$uuid/details' | '/chat/$uuid'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/sign-up'
    | '/_protected/chat/'
    | '/_protected/chat/$uuid/details'
    | '/_protected/chat/$uuid/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  SignUpRoute: typeof SignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/chat/': {
      id: '/_protected/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ProtectedChatIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/chat/$uuid/': {
      id: '/_protected/chat/$uuid/'
      path: '/chat/$uuid'
      fullPath: '/chat/$uuid'
      preLoaderRoute: typeof ProtectedChatUuidIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/chat/$uuid/details': {
      id: '/_protected/chat/$uuid/details'
      path: '/chat/$uuid/details'
      fullPath: '/chat/$uuid/details'
      preLoaderRoute: typeof ProtectedChatUuidDetailsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedChatIndexRoute: typeof ProtectedChatIndexRoute
  ProtectedChatUuidDetailsRoute: typeof ProtectedChatUuidDetailsRoute
  ProtectedChatUuidIndexRoute: typeof ProtectedChatUuidIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedChatIndexRoute: ProtectedChatIndexRoute,
  ProtectedChatUuidDetailsRoute: ProtectedChatUuidDetailsRoute,
  ProtectedChatUuidIndexRoute: ProtectedChatUuidIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  SignUpRoute: SignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
